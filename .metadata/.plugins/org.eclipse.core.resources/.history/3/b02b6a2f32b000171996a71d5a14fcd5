package demoExpertSystem;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class ExpertSystemManager {
	
	private static ArrayList<DatabaseFact> database = new ArrayList<DatabaseFact>();
	private static ArrayList<Rule> knowledgeBase = new ArrayList<Rule>();

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		FactFiller f = new FactFiller();
		database = f.getFacts();
		
		RuleFiller kb = new RuleFiller();
		knowledgeBase = kb.getKnowledgeBase();
		
		//testRule(1);
		
		//populateDatabase();
		//populateKnowledgeBase();
		
		//testFact(0);
		//testRule(0);
		//testFindFactIndex("environment");
		
		
		getUserInput();
	}
	
	// asks user questions about certain facts and places the answer in database using qAndA()
	//extn : evaluate rules as facts are updated and print?? depends on evaluation system
	private static void getUserInput() {
		
		//boolean success;
		
		//success = qAndA("What sort of environment is a trainee dealing with on the job?", "environment");
		
		while (!qAndA("What sort of environment is a trainee dealing with on the job?", "environment")){
			
			System.out.println("Invalid answer - please try again");
		}
	}
	
	// asks a question using the given question text
	//gets string response from user
	//creates conditional fact with name and value (and automatic positive relationship)
	//finds fact in database with same name
	//updates that fact
	// returns true when fact is updated
	private static boolean qAndA(String questionText, String factName){
		
		Scanner inScan = new Scanner(System.in);
		
		System.out.println(questionText);
		String answer = inScan.nextLine();
		
		//create new temp fact
		ConditionalFact cf = new ConditionalFact(factName, answer, true);
		
		//find corresponding database fact
		int index = findFactIndex(factName);
		
		// update fact and return true if it is successful, false otherwise
		return database.get(index).updateFactWith(cf);
		
	}
	
	// given a string which should be the name of a fact in the database
	// searches through database to find index of the fact with given name
	// returns index found
	// returns -1 if not found
	private static int findFactIndex(String factNameToSearch) {
		
		for (int i = 0; i < database.size(); i++){
			
			if(database.get(i).getName().equals(factNameToSearch))
				return i;
		}
		
		//if match not found, return -1
		return -1;
	}
	private static void testFindFactIndex(String testString){
		
		System.out.println("index of " + testString + " is " + findFactIndex(testString));
	}

	/*// create a list of facts with their 'allowed values'
	// all string values are lower case!!!!!!!!!!
	private static void populateDatabase(){
		
		DatabaseFact newF;
		
		
		newF = new DatabaseFact("environment", new ArrayList<String>(Arrays.asList("papers"
																			,"manuals", 
																			"documents",
																			"textbooks", 
																			"pictures", 
																			"illustrations", 
																			"photographs", 
																			"diagrams", 
																			"machines", 
																			"buildings",
																			"tools",
																			"numbers",
																			"formulas",
																			"computer programs")));
		database.add(newF);
		
		
	}*/
	
	/*// create a list of rules, all with antecedents, consequents and logic types
	private static void populateKnowledgeBase(){
		
		Rule newR;
		
		// create consequent list
		ArrayList<ConditionalFact> consequents = new ArrayList<ConditionalFact>();
		ConditionalFact cf = new ConditionalFact("environment", "papers", true);
		consequents.add(cf);
		cf = new ConditionalFact("environment", "manuals", true);
		consequents.add(cf);
		cf = new ConditionalFact("environment", "documents", true);
		consequents.add(cf);
		cf = new ConditionalFact("environment", "textbooks", true);
		consequents.add(cf);
		
		//create antecedent
		ConditionalFact antecedent = new ConditionalFact("stimulus_situation", "verbal", true);
		
		newR = new Rule(consequents, antecedent, "OR");
		
		knowledgeBase.add(newR);
		
		
	}*/
	
	private static void testFact(int index) {
		
				System.out.println("fact name = " + database.get(index).getName());
				System.out.println("fact known? = " + database.get(index).isKnown());
				
				if (database.get(index).isKnown())
					System.out.println("value = " + database.get(index).getValue());
				
				
				//Scanner inScan = new Scanner(System.in);
				
				
				
				/*while(true) {
					
					System.out.print("\nWhat is the value of \"" + database.get(index).getName() + "\" ");
					String newFactVal = inScan.nextLine();
					System.out.println("Value entered is: " + newFactVal);
					
					if (database.get(index).setValue(newFactVal))
						System.out.println("Success! value of " + database.get(index).getName() + " set to: " + database.get(index).getValue());
					
					else 
						System.out.println("Error! invalid value entered.");
				}*/
				
	}
	
	
	private static void testRules() {
		
		for(int j = 0; j < knowledgeBase.size(); j++) {
			
			printRule(j);
		}
	}
	
	private static void printRule(int index) {
		
		Rule testRule;
		ArrayList<ConditionalFact> ants;
		ConditionalFact con;
		String logicType;
		
		testRule = knowledgeBase.get(index);
		
		ants = testRule.getAntecedents();
		con = testRule.getConsequent();
		logicType = testRule.getLogicType();
		
		// print antecedents
		
		System.out.println("Antecedents:\n");
		
		for (int i = 0; i < ants.size(); i++){
			
			System.out.print("Antecedent " + (i + 1) + ": ");
			System.out.print("IF " + ants.get(i).getName());
			
			if (ants.get(i).isRelationshipPositive())
				System.out.print(" IS ");
			else
				System.out.print(" IS NOT ");
			
			System.out.print(ants.get(i).getValue());
			
			if (i < (ants.size() - 1))
				System.out.print(" " + logicType);
			
			System.out.println("");
		}
		
		// print consequent
		
		System.out.print("\nConsequent:\n\nTHEN " + con.getName());
		
		if (con.isRelationshipPositive())
			System.out.print(" IS ");
		else
			System.out.print(" IS NOT ");
		
		System.out.print(con.getValue() + "\n\n");
		
	}
}


